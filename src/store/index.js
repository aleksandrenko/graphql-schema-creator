
import { observable } from 'mobx';

const thr = (errorText) => { throw new Error(errorText) };

class Property {
    constructor({name}) {
        this.name = name || thr('Name is required for new Property creation.');
        this.type = ''; //string, number, email ...
        this.default = '';
        this.isRequired = false;
        this.autoGenerated = false;
        this.description = '';

        this._id = ''; //TODO generate random uuid
        this._type = 'property';
    }
}

class Edge {
    constructor({name}) {
        this.name = name || thr('Name is required for new Edge creation.');
        this.properties = [];

        this._id = ''; //TODO generate random uuid
        this._type = 'edge';
        this._startNode = null; //will point to an existing node object
        this._endNode = null; //will point to an existing node object
    }
}

class Node {
    constructor({name}) {
        this.name = name || thr('Name is required for new Node creation.');
        this.properties = [];
        this.edges = [];

        this._id = ''; //TODO generate random uuid
        this._type = 'node';
        this._color = '#50c878';
        this._position = {
            x: 10,
            y: 10
        }
    }
}

class TodoStore {
    @observable nodes = [];
    @observable edges = [];
    @observable selected = null; //selected entity node/edge

    @observable todos = [
        {
            task: 'Hardcoded task 1',
            completed: false,
            assignee: null
        },
        {
            task: 'Hardcoded task 2',
            completed: false,
            assignee: null
        }
    ];

    get completedTodosCount() {
        return this.todos.filter(
            todo => todo.completed === true
        ).length;
    }

    report() {
        if (this.todos.length === 0)
            return "<none>";
        return `Next todo: "${this.todos[0].task}". ` +
            `Progress: ${this.completedTodosCount}/${this.todos.length}`;
    }

    addTodo(task) {
        this.todos.push({
            task: task,
            completed: false,
            assignee: null
        });
    }
}

export default new TodoStore();

