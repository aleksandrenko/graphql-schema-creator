
import { observable } from 'mobx';
import getColor from '../utils/color';
import getUID from '../utils/getUID';

const thr = (errorText) => { throw new Error(errorText) };

class Property {
    constructor({name, id}) {
        this.name = name || thr('Name is required for new Property creation.');
        this.type = ''; //string, number, email ...
        this.default = '';
        this.isRequired = false;
        this.autoGenerated = false;
        this.description = '';

        this._id = id || getUID();
        this._type = 'property';
    }
}

class Edge {
    constructor({name, id, startNode, endNode}) {
        (!startNode) && thr('Start node is required for new Edge creation.');
        (!endNode) && thr('Start node is required for new Edge creation.');

        this.name = name || thr('Name is required for new Edge creation.');
        this.properties = [];

        this._id = id || getUID();
        this._type = 'edge';
        this._startNode = startNode; //will point to an existing node object
        this._endNode = endNode; //will point to an existing node object
    }

    set startNode(startNode) {
        this._startNode = startNode;
    }

    set endNode(endNode) {
        this._endNode = endNode;
    }
}

class Node {
    constructor({name, position, color, id}) {
        (!position || position.x === undefined || position.y === undefined) && thr('Positions is required for new Node creation.');

        this.name = name || thr('Name is required for new Node creation.');
        this.properties = [];
        this.edges = [];

        this._id = id || getUID();
        this._type = 'node';
        this._color = color || getColor();
        this._position = {
            x: position.x,
            y: position.y
        }
    }

    set position({x, y}) {
        this._position = {
            x,
            y
        }
    }
}

class TodoStore {
    @observable nodes = [];
    @observable edges = [];
    @observable selected = null; //selected entity node/edge

    @observable todos = [
        {
            task: 'Hardcoded task 1',
            completed: false,
            assignee: null
        },
        {
            task: 'Hardcoded task 2',
            completed: false,
            assignee: null
        }
    ];

    addNode({name, x, y}) {
        const position = { x, y };
        const newNode = new Node({name, position});
        this.nodes.push(newNode);
    }

    get completedTodosCount() {
        return this.todos.filter(
            todo => todo.completed === true
        ).length;
    }

    report() {
        if (this.todos.length === 0)
            return "<none>";
        return `Next todo: "${this.todos[0].task}". ` +
            `Progress: ${this.completedTodosCount}/${this.todos.length}`;
    }

    addTodo(task) {
        this.todos.push({
            task: task,
            completed: false,
            assignee: null
        });
    }
}

export default new TodoStore();

