import React, {Component} from 'react';

import {TextField} from 'office-ui-fabric-react/lib/TextField';
import {DefaultButton, IconButton} from 'office-ui-fabric-react/lib/Button';

import Property from "./Property";
import {observer} from 'mobx-react';

import QueryConfig from './QueryConfig';

import store from '../store/';

@observer
class EntityEdit extends Component {
    constructor(props) {
        super(props);

        this.state = {
            selectedProperty: null
        }
    }

    isSelected = (prop) => this.state.selectedProperty && this.state.selectedProperty.id === prop.id;

    onPropertyDeleteClick = (prop, e) => {
        store.selected.deleteProperty(prop);
        e.preventDefault();
        e.stopPropagation();
    };

    onAddNewProperty = () => {
        //#PERF postpone the update
        setTimeout(() => {
            const newProp = store.selected.addProperty();
            this.setState({
                selectedProperty: newProp
            })
        }, 0);
    };

    onColorChange = (e) => {
        store.selected.color = e.target.value;
    };

    onNameChange = (val) => {
        //#PERF postpone the update
        setTimeout(() => {
            store.selected.name = val;
        }, 0);
    };

    onPropertySelection = (prop) => {
        const selectedProperty = this.state.selectedProperty && this.state.selectedProperty.id === prop.id
        ? null
        : prop;

        this.setState({
            selectedProperty
        });
    };

    getPropLi = (prop) => {
        const selectedProperty = this.state.selectedProperty;
        const isPropSelected = this.isSelected(prop);

        let hintInfo = [];

        if (prop.type) {
            hintInfo.push(`${prop.type}`);
        }

        if (prop.isRequired) {
            hintInfo.push('!');
        }

        if (prop.isAutoGenerated) {
            hintInfo.push('@');
        }

        return (
            <li
                key={prop.id}
                className={(isPropSelected ? "selected" : '')}
                disabled={prop.isSystem}
            >
                <div
                    className="property-list-name"
                    onClick={prop.isSystem ? null : this.onPropertySelection.bind(this, prop)}>

                    {
                        !prop.isSystem && (
                            isPropSelected
                                ? <IconButton className="arrow" iconProps={{iconName: 'ChevronUp'}} />
                                : <IconButton className="arrow" iconProps={{iconName: 'ChevronDown'}} />
                        )
                    }

                    {prop.name}
                    <span className="property-list-name-hint">{hintInfo}</span>

                    {
                        !prop.isSystem &&
                        <IconButton
                            className="property-list-delete-btn"
                            iconProps={{iconName: 'Delete'}}
                            title='Delete'
                            onClick={this.onPropertyDeleteClick.bind(this, prop)}
                        />
                    }
                </div>

                {
                    (selectedProperty && selectedProperty.id === prop.id) &&
                    <Property data={selectedProperty}/>
                }
            </li>
        );
    };

    render() {
        const entity = store.selected;

        return (entity &&
            <div className="edit-entity">

                <div className="entity-name">
                    <span className="color-selector">
                    {
                        entity.color &&
                        <input
                            type="color"
                            value={entity.color}
                            onChange={this.onColorChange}
                        />
                    }
                    </span>

                    <TextField
                        className="entity-name-input"
                        value={entity.name}
                        onChanged={ this.onNameChange }
                    />

                    <div className="entity-name-type">({entity.type})</div>

                    <DefaultButton
                        iconProps={ { iconName: 'AddTo' } }
                        onClick={ this.onAddNewProperty }
                        className="create-property-btn"
                    >
                        Add Property
                    </DefaultButton>
                </div>

                <div className="queryEntries-wrapper">
                    <div className="wrapper-title">queries and mutations config</div>
                    <ul className="properties-list">
                        <QueryConfig />
                    </ul>
                </div>

                <div className="properties-wrapper">
                    <div className="wrapper-title">properties</div>
                    <ul className="properties-list">
                        {
                            /*Render first the system props*/
                            entity.properties
                                .filter(props => props.isSystem)
                                .map(this.getPropLi)
                        }

                        {
                            /*Render after that all rest. New props are added on top and before the system once*/
                            entity.properties
                                .filter(props => !props.isSystem)
                                .map(this.getPropLi)
                        }
                    </ul>
                </div>
            </div>
        )
    }
};

EntityEdit.defaultProps = {
    entity: null
};

export default EntityEdit;